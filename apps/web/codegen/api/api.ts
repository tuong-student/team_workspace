/* tslint:disable */
/* eslint-disable */
/**
 * Fiber Jira API
 * This is jira api swagger for Fiber
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: fiber@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, {
	AxiosInstance,
	AxiosPromise,
	AxiosRequestConfig
} from 'axios'
import { Configuration } from './configuration'
// Some imports not used depending on template conditions
// @ts-ignore
import {
	assertParamExists,
	createRequestFunction,
	DUMMY_BASE_URL,
	serializeDataIfNeeded,
	setApiKeyToObject,
	setSearchParams,
	toPathString
} from './common'
// @ts-ignore
import { BaseAPI, BASE_PATH, RequestArgs } from './base'

/**
 *
 * @export
 * @interface AuthLoginBody
 */
export interface AuthLoginBody {
	/**
	 *
	 * @type {string}
	 * @memberof AuthLoginBody
	 */
	email: string
	/**
	 *
	 * @type {string}
	 * @memberof AuthLoginBody
	 */
	password?: string
}
/**
 *
 * @export
 * @interface AuthLoginResp
 */
export interface AuthLoginResp {
	/**
	 *
	 * @type {string}
	 * @memberof AuthLoginResp
	 */
	accessToken?: string
	/**
	 *
	 * @type {string}
	 * @memberof AuthLoginResp
	 */
	refreshToken?: string
}
/**
 *
 * @export
 * @interface AuthRefreshTokenBody
 */
export interface AuthRefreshTokenBody {
	/**
	 *
	 * @type {string}
	 * @memberof AuthRefreshTokenBody
	 */
	refreshToken: string
}
/**
 *
 * @export
 * @interface CommonBasePaginationResponseProjectProject
 */
export interface CommonBasePaginationResponseProjectProject {
	/**
	 *
	 * @type {Array<ProjectProject>}
	 * @memberof CommonBasePaginationResponseProjectProject
	 */
	items?: Array<ProjectProject>
	/**
	 *
	 * @type {number}
	 * @memberof CommonBasePaginationResponseProjectProject
	 */
	page?: number
	/**
	 *
	 * @type {number}
	 * @memberof CommonBasePaginationResponseProjectProject
	 */
	pageSize?: number
	/**
	 *
	 * @type {number}
	 * @memberof CommonBasePaginationResponseProjectProject
	 */
	total?: number
}
/**
 *
 * @export
 * @interface CommonBasePaginationResponseUserUser
 */
export interface CommonBasePaginationResponseUserUser {
	/**
	 *
	 * @type {Array<UserUser>}
	 * @memberof CommonBasePaginationResponseUserUser
	 */
	items?: Array<UserUser>
	/**
	 *
	 * @type {number}
	 * @memberof CommonBasePaginationResponseUserUser
	 */
	page?: number
	/**
	 *
	 * @type {number}
	 * @memberof CommonBasePaginationResponseUserUser
	 */
	pageSize?: number
	/**
	 *
	 * @type {number}
	 * @memberof CommonBasePaginationResponseUserUser
	 */
	total?: number
}
/**
 *
 * @export
 * @interface CommonErrorResponse
 */
export interface CommonErrorResponse {
	/**
	 *
	 * @type {string}
	 * @memberof CommonErrorResponse
	 */
	failedField?: string
	/**
	 *
	 * @type {string}
	 * @memberof CommonErrorResponse
	 */
	tag?: string
	/**
	 *
	 * @type {string}
	 * @memberof CommonErrorResponse
	 */
	value?: string
}
/**
 *
 * @export
 * @interface ProjectProject
 */
export interface ProjectProject {
	/**
	 *
	 * @type {string}
	 * @memberof ProjectProject
	 */
	category?: string
	/**
	 *
	 * @type {string}
	 * @memberof ProjectProject
	 */
	createdAt?: string
	/**
	 *
	 * @type {string}
	 * @memberof ProjectProject
	 */
	description?: string
	/**
	 *
	 * @type {number}
	 * @memberof ProjectProject
	 */
	id?: number
	/**
	 *
	 * @type {string}
	 * @memberof ProjectProject
	 */
	name?: string
	/**
	 *
	 * @type {string}
	 * @memberof ProjectProject
	 */
	updatedAt?: string
}
/**
 *
 * @export
 * @interface ProjectWriteProjectBody
 */
export interface ProjectWriteProjectBody {
	/**
	 *
	 * @type {string}
	 * @memberof ProjectWriteProjectBody
	 */
	category?: string
	/**
	 *
	 * @type {string}
	 * @memberof ProjectWriteProjectBody
	 */
	description?: string
	/**
	 *
	 * @type {string}
	 * @memberof ProjectWriteProjectBody
	 */
	name: string
}
/**
 *
 * @export
 * @interface UserUpdateUserBody
 */
export interface UserUpdateUserBody {
	/**
	 *
	 * @type {string}
	 * @memberof UserUpdateUserBody
	 */
	avatarUrl?: string
	/**
	 *
	 * @type {string}
	 * @memberof UserUpdateUserBody
	 */
	fullName?: string
}
/**
 *
 * @export
 * @interface UserUser
 */
export interface UserUser {
	/**
	 *
	 * @type {string}
	 * @memberof UserUser
	 */
	avatarUrl?: string
	/**
	 *
	 * @type {string}
	 * @memberof UserUser
	 */
	createAt?: string
	/**
	 *
	 * @type {string}
	 * @memberof UserUser
	 */
	email?: string
	/**
	 *
	 * @type {string}
	 * @memberof UserUser
	 */
	fullName?: string
	/**
	 *
	 * @type {number}
	 * @memberof UserUser
	 */
	id?: number
	/**
	 *
	 * @type {string}
	 * @memberof UserUser
	 */
	password?: string
	/**
	 *
	 * @type {string}
	 * @memberof UserUser
	 */
	role?: string
	/**
	 *
	 * @type {string}
	 * @memberof UserUser
	 */
	updateAt?: string
}
/**
 *
 * @export
 * @interface UserUserResp
 */
export interface UserUserResp {
	/**
	 *
	 * @type {string}
	 * @memberof UserUserResp
	 */
	avatarUrl?: string
	/**
	 *
	 * @type {string}
	 * @memberof UserUserResp
	 */
	createAt?: string
	/**
	 *
	 * @type {string}
	 * @memberof UserUserResp
	 */
	email?: string
	/**
	 *
	 * @type {string}
	 * @memberof UserUserResp
	 */
	fullName?: string
	/**
	 *
	 * @type {number}
	 * @memberof UserUserResp
	 */
	id?: number
	/**
	 *
	 * @type {string}
	 * @memberof UserUserResp
	 */
	role?: string
	/**
	 *
	 * @type {string}
	 * @memberof UserUserResp
	 */
	updateAt?: string
}
/**
 *
 * @export
 * @interface UserWriteUserBody
 */
export interface UserWriteUserBody {
	/**
	 *
	 * @type {string}
	 * @memberof UserWriteUserBody
	 */
	email: string
	/**
	 *
	 * @type {string}
	 * @memberof UserWriteUserBody
	 */
	fullName: string
	/**
	 *
	 * @type {string}
	 * @memberof UserWriteUserBody
	 */
	password?: string
	/**
	 *
	 * @type {string}
	 * @memberof UserWriteUserBody
	 */
	role: string
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (
	configuration?: Configuration
) {
	return {
		/**
		 * Login api
		 * @summary Login api
		 * @param {AuthLoginBody} project Login payload
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		authLoginPost: async (
			project: AuthLoginBody,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'project' is not null or undefined
			assertParamExists('authLoginPost', 'project', project)
			const localVarPath = `/auth/login`
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(
				localVarPath,
				DUMMY_BASE_URL
			)
			let baseOptions
			if (configuration) {
				baseOptions = configuration.baseOptions
			}

			const localVarRequestOptions = {
				method: 'POST',
				...baseOptions,
				...options
			}
			const localVarHeaderParameter = {} as any
			const localVarQueryParameter = {} as any

			localVarHeaderParameter['Content-Type'] =
				'application/json'

			setSearchParams(localVarUrlObj, localVarQueryParameter)
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers
					? baseOptions.headers
					: {}
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			}
			localVarRequestOptions.data = serializeDataIfNeeded(
				project,
				localVarRequestOptions,
				configuration
			)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			}
		},
		/**
		 * Ger current user profile api
		 * @summary User profile api
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		authMeGet: async (
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			const localVarPath = `/auth/me`
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(
				localVarPath,
				DUMMY_BASE_URL
			)
			let baseOptions
			if (configuration) {
				baseOptions = configuration.baseOptions
			}

			const localVarRequestOptions = {
				method: 'GET',
				...baseOptions,
				...options
			}
			const localVarHeaderParameter = {} as any
			const localVarQueryParameter = {} as any

			// authentication ApiKeyAuth required
			await setApiKeyToObject(
				localVarHeaderParameter,
				'Authorization',
				configuration
			)

			setSearchParams(localVarUrlObj, localVarQueryParameter)
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers
					? baseOptions.headers
					: {}
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			}

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			}
		},
		/**
		 * Refresh token api
		 * @summary Refresh token api
		 * @param {AuthRefreshTokenBody} refreshToken Refresh token payload
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		authRefreshPost: async (
			refreshToken: AuthRefreshTokenBody,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'refreshToken' is not null or undefined
			assertParamExists(
				'authRefreshPost',
				'refreshToken',
				refreshToken
			)
			const localVarPath = `/auth/refresh`
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(
				localVarPath,
				DUMMY_BASE_URL
			)
			let baseOptions
			if (configuration) {
				baseOptions = configuration.baseOptions
			}

			const localVarRequestOptions = {
				method: 'POST',
				...baseOptions,
				...options
			}
			const localVarHeaderParameter = {} as any
			const localVarQueryParameter = {} as any

			localVarHeaderParameter['Content-Type'] =
				'application/json'

			setSearchParams(localVarUrlObj, localVarQueryParameter)
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers
					? baseOptions.headers
					: {}
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			}
			localVarRequestOptions.data = serializeDataIfNeeded(
				refreshToken,
				localVarRequestOptions,
				configuration
			)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			}
		}
	}
}

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator =
		AuthApiAxiosParamCreator(configuration)
	return {
		/**
		 * Login api
		 * @summary Login api
		 * @param {AuthLoginBody} project Login payload
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async authLoginPost(
			project: AuthLoginBody,
			options?: AxiosRequestConfig
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string
			) => AxiosPromise<AuthLoginResp>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.authLoginPost(
					project,
					options
				)
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			)
		},
		/**
		 * Ger current user profile api
		 * @summary User profile api
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async authMeGet(
			options?: AxiosRequestConfig
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string
			) => AxiosPromise<UserUserResp>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.authMeGet(
					options
				)
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			)
		},
		/**
		 * Refresh token api
		 * @summary Refresh token api
		 * @param {AuthRefreshTokenBody} refreshToken Refresh token payload
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async authRefreshPost(
			refreshToken: AuthRefreshTokenBody,
			options?: AxiosRequestConfig
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string
			) => AxiosPromise<AuthLoginResp>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.authRefreshPost(
					refreshToken,
					options
				)
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			)
		}
	}
}

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (
	configuration?: Configuration,
	basePath?: string,
	axios?: AxiosInstance
) {
	const localVarFp = AuthApiFp(configuration)
	return {
		/**
		 * Login api
		 * @summary Login api
		 * @param {AuthLoginBody} project Login payload
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		authLoginPost(
			project: AuthLoginBody,
			options?: any
		): AxiosPromise<AuthLoginResp> {
			return localVarFp
				.authLoginPost(project, options)
				.then((request) => request(axios, basePath))
		},
		/**
		 * Ger current user profile api
		 * @summary User profile api
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		authMeGet(options?: any): AxiosPromise<UserUserResp> {
			return localVarFp
				.authMeGet(options)
				.then((request) => request(axios, basePath))
		},
		/**
		 * Refresh token api
		 * @summary Refresh token api
		 * @param {AuthRefreshTokenBody} refreshToken Refresh token payload
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		authRefreshPost(
			refreshToken: AuthRefreshTokenBody,
			options?: any
		): AxiosPromise<AuthLoginResp> {
			return localVarFp
				.authRefreshPost(refreshToken, options)
				.then((request) => request(axios, basePath))
		}
	}
}

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
	/**
	 * Login api
	 * @summary Login api
	 * @param {AuthLoginBody} project Login payload
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AuthApi
	 */
	public authLoginPost(
		project: AuthLoginBody,
		options?: AxiosRequestConfig
	) {
		return AuthApiFp(this.configuration)
			.authLoginPost(project, options)
			.then((request) => request(this.axios, this.basePath))
	}

	/**
	 * Ger current user profile api
	 * @summary User profile api
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AuthApi
	 */
	public authMeGet(options?: AxiosRequestConfig) {
		return AuthApiFp(this.configuration)
			.authMeGet(options)
			.then((request) => request(this.axios, this.basePath))
	}

	/**
	 * Refresh token api
	 * @summary Refresh token api
	 * @param {AuthRefreshTokenBody} refreshToken Refresh token payload
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AuthApi
	 */
	public authRefreshPost(
		refreshToken: AuthRefreshTokenBody,
		options?: AxiosRequestConfig
	) {
		return AuthApiFp(this.configuration)
			.authRefreshPost(refreshToken, options)
			.then((request) => request(this.axios, this.basePath))
	}
}

/**
 * ProjectApi - axios parameter creator
 * @export
 */
export const ProjectApiAxiosParamCreator = function (
	configuration?: Configuration
) {
	return {
		/**
		 * Create a new project with coresponding information
		 * @summary Create project api
		 * @param {ProjectWriteProjectBody} project New Project body
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		projectCreatePost: async (
			project: ProjectWriteProjectBody,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'project' is not null or undefined
			assertParamExists(
				'projectCreatePost',
				'project',
				project
			)
			const localVarPath = `/project/create`
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(
				localVarPath,
				DUMMY_BASE_URL
			)
			let baseOptions
			if (configuration) {
				baseOptions = configuration.baseOptions
			}

			const localVarRequestOptions = {
				method: 'POST',
				...baseOptions,
				...options
			}
			const localVarHeaderParameter = {} as any
			const localVarQueryParameter = {} as any

			// authentication ApiKeyAuth required
			await setApiKeyToObject(
				localVarHeaderParameter,
				'Authorization',
				configuration
			)

			localVarHeaderParameter['Content-Type'] =
				'application/json'

			setSearchParams(localVarUrlObj, localVarQueryParameter)
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers
					? baseOptions.headers
					: {}
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			}
			localVarRequestOptions.data = serializeDataIfNeeded(
				project,
				localVarRequestOptions,
				configuration
			)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			}
		},
		/**
		 * Delete a project with coresponding id
		 * @summary Delete project api
		 * @param {string} id Project id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		projectDeleteIdDelete: async (
			id: string,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('projectDeleteIdDelete', 'id', id)
			const localVarPath = `/project/delete/{id}`.replace(
				`{${'id'}}`,
				encodeURIComponent(String(id))
			)
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(
				localVarPath,
				DUMMY_BASE_URL
			)
			let baseOptions
			if (configuration) {
				baseOptions = configuration.baseOptions
			}

			const localVarRequestOptions = {
				method: 'DELETE',
				...baseOptions,
				...options
			}
			const localVarHeaderParameter = {} as any
			const localVarQueryParameter = {} as any

			// authentication ApiKeyAuth required
			await setApiKeyToObject(
				localVarHeaderParameter,
				'Authorization',
				configuration
			)

			setSearchParams(localVarUrlObj, localVarQueryParameter)
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers
					? baseOptions.headers
					: {}
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			}

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			}
		},
		/**
		 * Get a project details with coresponding id
		 * @summary Find project details api
		 * @param {string} id Project id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		projectDetailsIdGet: async (
			id: string,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('projectDetailsIdGet', 'id', id)
			const localVarPath = `/project/details/{id}`.replace(
				`{${'id'}}`,
				encodeURIComponent(String(id))
			)
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(
				localVarPath,
				DUMMY_BASE_URL
			)
			let baseOptions
			if (configuration) {
				baseOptions = configuration.baseOptions
			}

			const localVarRequestOptions = {
				method: 'GET',
				...baseOptions,
				...options
			}
			const localVarHeaderParameter = {} as any
			const localVarQueryParameter = {} as any

			// authentication ApiKeyAuth required
			await setApiKeyToObject(
				localVarHeaderParameter,
				'Authorization',
				configuration
			)

			setSearchParams(localVarUrlObj, localVarQueryParameter)
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers
					? baseOptions.headers
					: {}
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			}

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			}
		},
		/**
		 * Get a list of categories with coresponding query parameters
		 * @summary Find projects api
		 * @param {number} [page] Project page number
		 * @param {number} [pageSize] Project page size return
		 * @param {string} [q] Project query
		 * @param {'asc' | 'desc'} [sort] Sort direction
		 * @param {'id' | 'name' | 'description'} [sortBy] Sort by
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		projectFindGet: async (
			page?: number,
			pageSize?: number,
			q?: string,
			sort?: 'asc' | 'desc',
			sortBy?: 'id' | 'name' | 'description',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			const localVarPath = `/project/find`
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(
				localVarPath,
				DUMMY_BASE_URL
			)
			let baseOptions
			if (configuration) {
				baseOptions = configuration.baseOptions
			}

			const localVarRequestOptions = {
				method: 'GET',
				...baseOptions,
				...options
			}
			const localVarHeaderParameter = {} as any
			const localVarQueryParameter = {} as any

			// authentication ApiKeyAuth required
			await setApiKeyToObject(
				localVarHeaderParameter,
				'Authorization',
				configuration
			)

			if (page !== undefined) {
				localVarQueryParameter['page'] = page
			}

			if (pageSize !== undefined) {
				localVarQueryParameter['pageSize'] = pageSize
			}

			if (q !== undefined) {
				localVarQueryParameter['q'] = q
			}

			if (sort !== undefined) {
				localVarQueryParameter['sort'] = sort
			}

			if (sortBy !== undefined) {
				localVarQueryParameter['sortBy'] = sortBy
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter)
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers
					? baseOptions.headers
					: {}
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			}

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			}
		},
		/**
		 * Update a project with coresponding id
		 * @summary Update project api
		 * @param {string} id Project Id
		 * @param {ProjectWriteProjectBody} project Update project
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		projectUpdateIdPut: async (
			id: string,
			project: ProjectWriteProjectBody,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('projectUpdateIdPut', 'id', id)
			// verify required parameter 'project' is not null or undefined
			assertParamExists(
				'projectUpdateIdPut',
				'project',
				project
			)
			const localVarPath = `/project/update/{id}`.replace(
				`{${'id'}}`,
				encodeURIComponent(String(id))
			)
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(
				localVarPath,
				DUMMY_BASE_URL
			)
			let baseOptions
			if (configuration) {
				baseOptions = configuration.baseOptions
			}

			const localVarRequestOptions = {
				method: 'PUT',
				...baseOptions,
				...options
			}
			const localVarHeaderParameter = {} as any
			const localVarQueryParameter = {} as any

			// authentication ApiKeyAuth required
			await setApiKeyToObject(
				localVarHeaderParameter,
				'Authorization',
				configuration
			)

			localVarHeaderParameter['Content-Type'] =
				'application/json'

			setSearchParams(localVarUrlObj, localVarQueryParameter)
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers
					? baseOptions.headers
					: {}
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			}
			localVarRequestOptions.data = serializeDataIfNeeded(
				project,
				localVarRequestOptions,
				configuration
			)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			}
		}
	}
}

/**
 * ProjectApi - functional programming interface
 * @export
 */
export const ProjectApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator =
		ProjectApiAxiosParamCreator(configuration)
	return {
		/**
		 * Create a new project with coresponding information
		 * @summary Create project api
		 * @param {ProjectWriteProjectBody} project New Project body
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async projectCreatePost(
			project: ProjectWriteProjectBody,
			options?: AxiosRequestConfig
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string
			) => AxiosPromise<ProjectProject>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.projectCreatePost(
					project,
					options
				)
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			)
		},
		/**
		 * Delete a project with coresponding id
		 * @summary Delete project api
		 * @param {string} id Project id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async projectDeleteIdDelete(
			id: string,
			options?: AxiosRequestConfig
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string
			) => AxiosPromise<ProjectProject>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.projectDeleteIdDelete(
					id,
					options
				)
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			)
		},
		/**
		 * Get a project details with coresponding id
		 * @summary Find project details api
		 * @param {string} id Project id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async projectDetailsIdGet(
			id: string,
			options?: AxiosRequestConfig
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string
			) => AxiosPromise<ProjectProject>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.projectDetailsIdGet(
					id,
					options
				)
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			)
		},
		/**
		 * Get a list of categories with coresponding query parameters
		 * @summary Find projects api
		 * @param {number} [page] Project page number
		 * @param {number} [pageSize] Project page size return
		 * @param {string} [q] Project query
		 * @param {'asc' | 'desc'} [sort] Sort direction
		 * @param {'id' | 'name' | 'description'} [sortBy] Sort by
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async projectFindGet(
			page?: number,
			pageSize?: number,
			q?: string,
			sort?: 'asc' | 'desc',
			sortBy?: 'id' | 'name' | 'description',
			options?: AxiosRequestConfig
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string
			) => AxiosPromise<CommonBasePaginationResponseProjectProject>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.projectFindGet(
					page,
					pageSize,
					q,
					sort,
					sortBy,
					options
				)
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			)
		},
		/**
		 * Update a project with coresponding id
		 * @summary Update project api
		 * @param {string} id Project Id
		 * @param {ProjectWriteProjectBody} project Update project
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async projectUpdateIdPut(
			id: string,
			project: ProjectWriteProjectBody,
			options?: AxiosRequestConfig
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string
			) => AxiosPromise<ProjectProject>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.projectUpdateIdPut(
					id,
					project,
					options
				)
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			)
		}
	}
}

/**
 * ProjectApi - factory interface
 * @export
 */
export const ProjectApiFactory = function (
	configuration?: Configuration,
	basePath?: string,
	axios?: AxiosInstance
) {
	const localVarFp = ProjectApiFp(configuration)
	return {
		/**
		 * Create a new project with coresponding information
		 * @summary Create project api
		 * @param {ProjectWriteProjectBody} project New Project body
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		projectCreatePost(
			project: ProjectWriteProjectBody,
			options?: any
		): AxiosPromise<ProjectProject> {
			return localVarFp
				.projectCreatePost(project, options)
				.then((request) => request(axios, basePath))
		},
		/**
		 * Delete a project with coresponding id
		 * @summary Delete project api
		 * @param {string} id Project id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		projectDeleteIdDelete(
			id: string,
			options?: any
		): AxiosPromise<ProjectProject> {
			return localVarFp
				.projectDeleteIdDelete(id, options)
				.then((request) => request(axios, basePath))
		},
		/**
		 * Get a project details with coresponding id
		 * @summary Find project details api
		 * @param {string} id Project id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		projectDetailsIdGet(
			id: string,
			options?: any
		): AxiosPromise<ProjectProject> {
			return localVarFp
				.projectDetailsIdGet(id, options)
				.then((request) => request(axios, basePath))
		},
		/**
		 * Get a list of categories with coresponding query parameters
		 * @summary Find projects api
		 * @param {number} [page] Project page number
		 * @param {number} [pageSize] Project page size return
		 * @param {string} [q] Project query
		 * @param {'asc' | 'desc'} [sort] Sort direction
		 * @param {'id' | 'name' | 'description'} [sortBy] Sort by
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		projectFindGet(
			page?: number,
			pageSize?: number,
			q?: string,
			sort?: 'asc' | 'desc',
			sortBy?: 'id' | 'name' | 'description',
			options?: any
		): AxiosPromise<CommonBasePaginationResponseProjectProject> {
			return localVarFp
				.projectFindGet(
					page,
					pageSize,
					q,
					sort,
					sortBy,
					options
				)
				.then((request) => request(axios, basePath))
		},
		/**
		 * Update a project with coresponding id
		 * @summary Update project api
		 * @param {string} id Project Id
		 * @param {ProjectWriteProjectBody} project Update project
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		projectUpdateIdPut(
			id: string,
			project: ProjectWriteProjectBody,
			options?: any
		): AxiosPromise<ProjectProject> {
			return localVarFp
				.projectUpdateIdPut(id, project, options)
				.then((request) => request(axios, basePath))
		}
	}
}

/**
 * ProjectApi - object-oriented interface
 * @export
 * @class ProjectApi
 * @extends {BaseAPI}
 */
export class ProjectApi extends BaseAPI {
	/**
	 * Create a new project with coresponding information
	 * @summary Create project api
	 * @param {ProjectWriteProjectBody} project New Project body
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ProjectApi
	 */
	public projectCreatePost(
		project: ProjectWriteProjectBody,
		options?: AxiosRequestConfig
	) {
		return ProjectApiFp(this.configuration)
			.projectCreatePost(project, options)
			.then((request) => request(this.axios, this.basePath))
	}

	/**
	 * Delete a project with coresponding id
	 * @summary Delete project api
	 * @param {string} id Project id
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ProjectApi
	 */
	public projectDeleteIdDelete(id: string, options?: AxiosRequestConfig) {
		return ProjectApiFp(this.configuration)
			.projectDeleteIdDelete(id, options)
			.then((request) => request(this.axios, this.basePath))
	}

	/**
	 * Get a project details with coresponding id
	 * @summary Find project details api
	 * @param {string} id Project id
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ProjectApi
	 */
	public projectDetailsIdGet(id: string, options?: AxiosRequestConfig) {
		return ProjectApiFp(this.configuration)
			.projectDetailsIdGet(id, options)
			.then((request) => request(this.axios, this.basePath))
	}

	/**
	 * Get a list of categories with coresponding query parameters
	 * @summary Find projects api
	 * @param {number} [page] Project page number
	 * @param {number} [pageSize] Project page size return
	 * @param {string} [q] Project query
	 * @param {'asc' | 'desc'} [sort] Sort direction
	 * @param {'id' | 'name' | 'description'} [sortBy] Sort by
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ProjectApi
	 */
	public projectFindGet(
		page?: number,
		pageSize?: number,
		q?: string,
		sort?: 'asc' | 'desc',
		sortBy?: 'id' | 'name' | 'description',
		options?: AxiosRequestConfig
	) {
		return ProjectApiFp(this.configuration)
			.projectFindGet(
				page,
				pageSize,
				q,
				sort,
				sortBy,
				options
			)
			.then((request) => request(this.axios, this.basePath))
	}

	/**
	 * Update a project with coresponding id
	 * @summary Update project api
	 * @param {string} id Project Id
	 * @param {ProjectWriteProjectBody} project Update project
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ProjectApi
	 */
	public projectUpdateIdPut(
		id: string,
		project: ProjectWriteProjectBody,
		options?: AxiosRequestConfig
	) {
		return ProjectApiFp(this.configuration)
			.projectUpdateIdPut(id, project, options)
			.then((request) => request(this.axios, this.basePath))
	}
}

/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (
	configuration?: Configuration
) {
	return {
		/**
		 * Create a new user with coresponding information
		 * @summary Create user api
		 * @param {UserWriteUserBody} user New User body
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		userCreatePost: async (
			user: UserWriteUserBody,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'user' is not null or undefined
			assertParamExists('userCreatePost', 'user', user)
			const localVarPath = `/user/create`
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(
				localVarPath,
				DUMMY_BASE_URL
			)
			let baseOptions
			if (configuration) {
				baseOptions = configuration.baseOptions
			}

			const localVarRequestOptions = {
				method: 'POST',
				...baseOptions,
				...options
			}
			const localVarHeaderParameter = {} as any
			const localVarQueryParameter = {} as any

			// authentication ApiKeyAuth required
			await setApiKeyToObject(
				localVarHeaderParameter,
				'Authorization',
				configuration
			)

			localVarHeaderParameter['Content-Type'] =
				'application/json'

			setSearchParams(localVarUrlObj, localVarQueryParameter)
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers
					? baseOptions.headers
					: {}
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			}
			localVarRequestOptions.data = serializeDataIfNeeded(
				user,
				localVarRequestOptions,
				configuration
			)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			}
		},
		/**
		 * Delete a user with coresponding id
		 * @summary Delete user api
		 * @param {string} id User id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		userDeleteIdDelete: async (
			id: string,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('userDeleteIdDelete', 'id', id)
			const localVarPath = `/user/delete/{id}`.replace(
				`{${'id'}}`,
				encodeURIComponent(String(id))
			)
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(
				localVarPath,
				DUMMY_BASE_URL
			)
			let baseOptions
			if (configuration) {
				baseOptions = configuration.baseOptions
			}

			const localVarRequestOptions = {
				method: 'DELETE',
				...baseOptions,
				...options
			}
			const localVarHeaderParameter = {} as any
			const localVarQueryParameter = {} as any

			// authentication ApiKeyAuth required
			await setApiKeyToObject(
				localVarHeaderParameter,
				'Authorization',
				configuration
			)

			setSearchParams(localVarUrlObj, localVarQueryParameter)
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers
					? baseOptions.headers
					: {}
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			}

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			}
		},
		/**
		 * Get a user details with coresponding id
		 * @summary Find user details api
		 * @param {string} id User id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		userDetailsIdGet: async (
			id: string,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('userDetailsIdGet', 'id', id)
			const localVarPath = `/user/details/{id}`.replace(
				`{${'id'}}`,
				encodeURIComponent(String(id))
			)
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(
				localVarPath,
				DUMMY_BASE_URL
			)
			let baseOptions
			if (configuration) {
				baseOptions = configuration.baseOptions
			}

			const localVarRequestOptions = {
				method: 'GET',
				...baseOptions,
				...options
			}
			const localVarHeaderParameter = {} as any
			const localVarQueryParameter = {} as any

			// authentication ApiKeyAuth required
			await setApiKeyToObject(
				localVarHeaderParameter,
				'Authorization',
				configuration
			)

			setSearchParams(localVarUrlObj, localVarQueryParameter)
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers
					? baseOptions.headers
					: {}
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			}

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			}
		},
		/**
		 * Get a list of categories with coresponding query parameters
		 * @summary Find users api
		 * @param {number} [page] User page number
		 * @param {number} [pageSize] User page size return
		 * @param {string} [q] User query
		 * @param {'asc' | 'desc'} [sort] Sort direction
		 * @param {'id' | 'name' | 'description'} [sortBy] Sort by
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		userFindGet: async (
			page?: number,
			pageSize?: number,
			q?: string,
			sort?: 'asc' | 'desc',
			sortBy?: 'id' | 'name' | 'description',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			const localVarPath = `/user/find`
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(
				localVarPath,
				DUMMY_BASE_URL
			)
			let baseOptions
			if (configuration) {
				baseOptions = configuration.baseOptions
			}

			const localVarRequestOptions = {
				method: 'GET',
				...baseOptions,
				...options
			}
			const localVarHeaderParameter = {} as any
			const localVarQueryParameter = {} as any

			// authentication ApiKeyAuth required
			await setApiKeyToObject(
				localVarHeaderParameter,
				'Authorization',
				configuration
			)

			if (page !== undefined) {
				localVarQueryParameter['page'] = page
			}

			if (pageSize !== undefined) {
				localVarQueryParameter['pageSize'] = pageSize
			}

			if (q !== undefined) {
				localVarQueryParameter['q'] = q
			}

			if (sort !== undefined) {
				localVarQueryParameter['sort'] = sort
			}

			if (sortBy !== undefined) {
				localVarQueryParameter['sortBy'] = sortBy
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter)
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers
					? baseOptions.headers
					: {}
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			}

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			}
		},
		/**
		 * Update a user with coresponding id
		 * @summary Update user api
		 * @param {string} id User Id
		 * @param {UserUpdateUserBody} user Update project
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		userUpdateIdPut: async (
			id: string,
			user: UserUpdateUserBody,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('userUpdateIdPut', 'id', id)
			// verify required parameter 'user' is not null or undefined
			assertParamExists('userUpdateIdPut', 'user', user)
			const localVarPath = `/user/update/{id}`.replace(
				`{${'id'}}`,
				encodeURIComponent(String(id))
			)
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(
				localVarPath,
				DUMMY_BASE_URL
			)
			let baseOptions
			if (configuration) {
				baseOptions = configuration.baseOptions
			}

			const localVarRequestOptions = {
				method: 'PUT',
				...baseOptions,
				...options
			}
			const localVarHeaderParameter = {} as any
			const localVarQueryParameter = {} as any

			// authentication ApiKeyAuth required
			await setApiKeyToObject(
				localVarHeaderParameter,
				'Authorization',
				configuration
			)

			localVarHeaderParameter['Content-Type'] =
				'application/json'

			setSearchParams(localVarUrlObj, localVarQueryParameter)
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers
					? baseOptions.headers
					: {}
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			}
			localVarRequestOptions.data = serializeDataIfNeeded(
				user,
				localVarRequestOptions,
				configuration
			)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			}
		}
	}
}

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator =
		UserApiAxiosParamCreator(configuration)
	return {
		/**
		 * Create a new user with coresponding information
		 * @summary Create user api
		 * @param {UserWriteUserBody} user New User body
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async userCreatePost(
			user: UserWriteUserBody,
			options?: AxiosRequestConfig
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string
			) => AxiosPromise<UserUserResp>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.userCreatePost(
					user,
					options
				)
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			)
		},
		/**
		 * Delete a user with coresponding id
		 * @summary Delete user api
		 * @param {string} id User id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async userDeleteIdDelete(
			id: string,
			options?: AxiosRequestConfig
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string
			) => AxiosPromise<UserUser>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.userDeleteIdDelete(
					id,
					options
				)
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			)
		},
		/**
		 * Get a user details with coresponding id
		 * @summary Find user details api
		 * @param {string} id User id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async userDetailsIdGet(
			id: string,
			options?: AxiosRequestConfig
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string
			) => AxiosPromise<UserUser>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.userDetailsIdGet(
					id,
					options
				)
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			)
		},
		/**
		 * Get a list of categories with coresponding query parameters
		 * @summary Find users api
		 * @param {number} [page] User page number
		 * @param {number} [pageSize] User page size return
		 * @param {string} [q] User query
		 * @param {'asc' | 'desc'} [sort] Sort direction
		 * @param {'id' | 'name' | 'description'} [sortBy] Sort by
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async userFindGet(
			page?: number,
			pageSize?: number,
			q?: string,
			sort?: 'asc' | 'desc',
			sortBy?: 'id' | 'name' | 'description',
			options?: AxiosRequestConfig
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string
			) => AxiosPromise<CommonBasePaginationResponseUserUser>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.userFindGet(
					page,
					pageSize,
					q,
					sort,
					sortBy,
					options
				)
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			)
		},
		/**
		 * Update a user with coresponding id
		 * @summary Update user api
		 * @param {string} id User Id
		 * @param {UserUpdateUserBody} user Update project
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async userUpdateIdPut(
			id: string,
			user: UserUpdateUserBody,
			options?: AxiosRequestConfig
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string
			) => AxiosPromise<UserUser>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.userUpdateIdPut(
					id,
					user,
					options
				)
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			)
		}
	}
}

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (
	configuration?: Configuration,
	basePath?: string,
	axios?: AxiosInstance
) {
	const localVarFp = UserApiFp(configuration)
	return {
		/**
		 * Create a new user with coresponding information
		 * @summary Create user api
		 * @param {UserWriteUserBody} user New User body
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		userCreatePost(
			user: UserWriteUserBody,
			options?: any
		): AxiosPromise<UserUserResp> {
			return localVarFp
				.userCreatePost(user, options)
				.then((request) => request(axios, basePath))
		},
		/**
		 * Delete a user with coresponding id
		 * @summary Delete user api
		 * @param {string} id User id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		userDeleteIdDelete(
			id: string,
			options?: any
		): AxiosPromise<UserUser> {
			return localVarFp
				.userDeleteIdDelete(id, options)
				.then((request) => request(axios, basePath))
		},
		/**
		 * Get a user details with coresponding id
		 * @summary Find user details api
		 * @param {string} id User id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		userDetailsIdGet(
			id: string,
			options?: any
		): AxiosPromise<UserUser> {
			return localVarFp
				.userDetailsIdGet(id, options)
				.then((request) => request(axios, basePath))
		},
		/**
		 * Get a list of categories with coresponding query parameters
		 * @summary Find users api
		 * @param {number} [page] User page number
		 * @param {number} [pageSize] User page size return
		 * @param {string} [q] User query
		 * @param {'asc' | 'desc'} [sort] Sort direction
		 * @param {'id' | 'name' | 'description'} [sortBy] Sort by
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		userFindGet(
			page?: number,
			pageSize?: number,
			q?: string,
			sort?: 'asc' | 'desc',
			sortBy?: 'id' | 'name' | 'description',
			options?: any
		): AxiosPromise<CommonBasePaginationResponseUserUser> {
			return localVarFp
				.userFindGet(
					page,
					pageSize,
					q,
					sort,
					sortBy,
					options
				)
				.then((request) => request(axios, basePath))
		},
		/**
		 * Update a user with coresponding id
		 * @summary Update user api
		 * @param {string} id User Id
		 * @param {UserUpdateUserBody} user Update project
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		userUpdateIdPut(
			id: string,
			user: UserUpdateUserBody,
			options?: any
		): AxiosPromise<UserUser> {
			return localVarFp
				.userUpdateIdPut(id, user, options)
				.then((request) => request(axios, basePath))
		}
	}
}

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
	/**
	 * Create a new user with coresponding information
	 * @summary Create user api
	 * @param {UserWriteUserBody} user New User body
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof UserApi
	 */
	public userCreatePost(
		user: UserWriteUserBody,
		options?: AxiosRequestConfig
	) {
		return UserApiFp(this.configuration)
			.userCreatePost(user, options)
			.then((request) => request(this.axios, this.basePath))
	}

	/**
	 * Delete a user with coresponding id
	 * @summary Delete user api
	 * @param {string} id User id
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof UserApi
	 */
	public userDeleteIdDelete(id: string, options?: AxiosRequestConfig) {
		return UserApiFp(this.configuration)
			.userDeleteIdDelete(id, options)
			.then((request) => request(this.axios, this.basePath))
	}

	/**
	 * Get a user details with coresponding id
	 * @summary Find user details api
	 * @param {string} id User id
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof UserApi
	 */
	public userDetailsIdGet(id: string, options?: AxiosRequestConfig) {
		return UserApiFp(this.configuration)
			.userDetailsIdGet(id, options)
			.then((request) => request(this.axios, this.basePath))
	}

	/**
	 * Get a list of categories with coresponding query parameters
	 * @summary Find users api
	 * @param {number} [page] User page number
	 * @param {number} [pageSize] User page size return
	 * @param {string} [q] User query
	 * @param {'asc' | 'desc'} [sort] Sort direction
	 * @param {'id' | 'name' | 'description'} [sortBy] Sort by
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof UserApi
	 */
	public userFindGet(
		page?: number,
		pageSize?: number,
		q?: string,
		sort?: 'asc' | 'desc',
		sortBy?: 'id' | 'name' | 'description',
		options?: AxiosRequestConfig
	) {
		return UserApiFp(this.configuration)
			.userFindGet(page, pageSize, q, sort, sortBy, options)
			.then((request) => request(this.axios, this.basePath))
	}

	/**
	 * Update a user with coresponding id
	 * @summary Update user api
	 * @param {string} id User Id
	 * @param {UserUpdateUserBody} user Update project
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof UserApi
	 */
	public userUpdateIdPut(
		id: string,
		user: UserUpdateUserBody,
		options?: AxiosRequestConfig
	) {
		return UserApiFp(this.configuration)
			.userUpdateIdPut(id, user, options)
			.then((request) => request(this.axios, this.basePath))
	}
}
